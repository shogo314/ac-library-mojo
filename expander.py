import argparse
from logging import getLogger
from pathlib import Path
import sys
from tools.dependencies import get_dependencies_contents


logger = getLogger(__name__)


def main(entry: Path, output: Path, include: list[Path], comment: bool):
    logger.info(f"Entry file: {entry}")
    logger.info(f"Output file: {output}")
    logger.info(f"Include directories: {include}")
    logger.info(f"comment: {comment}")
    visited = set()

    def dfs(path: Path):
        visited.add(path)
        d, c = get_dependencies_contents(path, include)
        for q in d:
            if q in visited:
                continue
            dfs(q)
        try:
            with output.open("a") as f:
                if comment:
                    f.write(f"\n# {path}\n")
                f.write("\n" + c + "\n")
        except Exception as e:
            logger.error(f"Failed to write {path} to {output}: {e}")
            sys.exit(1)

    dfs(entry)
    logger.info(f"Wrote flattened file to {output}")


def parse_args():
    parser = argparse.ArgumentParser(
        description="Flatten a Mojo file by resolving and expanding its import dependencies into a single file."
    )
    parser.add_argument("entry", help="Entry point Mojo file (e.g., main.mojo)")
    parser.add_argument(
        "-o", "--output", default="output.mojo", help="Output file name after flattening (default: output.mojo)"
    )
    parser.add_argument(
        "-I",
        "--include",
        action="append",
        default=[],
        help="Additional include directories for resolving imports (can be specified multiple times)",
    )
    parser.add_argument("-v", "--verbose", action="store_true", help="Enable verbose logging")
    parser.add_argument("--comment", dest="comment", action="store_true", help="Enable comments")
    parser.add_argument("--no-comment", dest="comment", action="store_false", help="Disable comments")
    parser.set_defaults(comment=True)
    return parser.parse_args()


def configure_logging(verbose: bool):
    from logging import basicConfig, DEBUG, WARNING

    level = DEBUG if verbose else WARNING
    basicConfig(format="[%(levelname)s] %(message)s", level=level)


if __name__ == "__main__":
    args = parse_args()
    configure_logging(args.verbose)
    logger.info(f"Verbose: {args.verbose}")
    comment = args.comment
    entry = Path(args.entry).resolve()
    if not entry.is_file():
        logger.error(f"{entry} is not a file.")
        sys.exit(1)
    output = Path(args.output).resolve()
    if output.is_dir():
        logger.error(f"{output} is a directory.")
        sys.exit(1)
    try:
        with output.open("w") as f:
            if comment:
                f.write(f"# this file was generated by {Path(__file__).name}.\n")
    except OSError as e:
        logger.error(f"Failed to write to {output}: {e}")
        sys.exit(1)
    include = []
    for i in args.include:
        p = Path(i)
        if p.is_dir():
            include.append(p.resolve())
        else:
            logger.warning(f"{p} is not directory.")
    main(entry, output, include, comment)
